{"version":3,"sources":["scripts/main.js"],"names":["BASE_URL","body","document","getPhonesId","url","fetch","then","response","json","result","map","phone","id","getFirstReceivedDetails","idList","Promise","race","insertAdjacentHTML","name","getAllSuccessfulDetails","all","responses","el","ul","querySelector","getThreeFastestDetails","filter","i","catch","error","Error"],"mappings":";AAAA,aAEA,IAAMA,EACF,6DAEEC,EAAOC,SAASD,KAEhBE,EAAc,SAACC,GACZC,OAAAA,MAASD,GAAAA,OAAAA,EAAT,gBACJE,KAAK,SAAAC,GAAYA,OAAAA,EAASC,SAC1BF,KAAK,SAAAG,GAAUA,OAAAA,EAAOC,IAAI,SAAAC,GAASA,OAAAA,EAAMC,QAGxCC,EAA0B,SAACT,EAAKU,GACpCC,QAAQC,KAAKF,EAAOJ,IAAI,SAAAE,GAAMP,OAAAA,MAASD,GAAAA,OAAAA,EAAaQ,WAAAA,OAAAA,EAA1B,aACvBN,KAAK,SAAAC,GAAYA,OAAAA,EAASC,SAC1BF,KAAK,SAAAK,GACJV,EAAKgB,mBAAmB,YAGIN,8GAAAA,OAAAA,EAAMO,KAHlC,0CASAC,EAA0B,SAACf,EAAKU,GACpCC,QAAQK,IAAIN,EAAOJ,IAAI,SAAAE,GAAMP,OAAAA,MAASD,GAAAA,OAAAA,EAAaQ,WAAAA,OAAAA,EAA1B,aACtBN,KAAK,SAAAe,GAAaN,OAAAA,QAAQK,IAAIC,EAAUX,IAAI,SAAAY,GAAMA,OAAAA,EAAGd,YACrDF,KAAK,SAAAG,GACJR,EAAKgB,mBAAmB,YAAxB,sIAOMM,IAAAA,EAAKrB,SAASsB,cAAc,QAElCf,EAAOC,IAAI,SAAAC,GACTY,EAAGN,mBAAmB,YACdN,mBAAAA,OAAAA,EAAMO,KADd,yBAOFO,EAAyB,SAACrB,EAAKU,GACnCC,QAAQK,IAAIN,EAAOJ,IAAI,SAAAE,GAAMP,OAAAA,MAASD,GAAAA,OAAAA,EAAaQ,WAAAA,OAAAA,EAA1B,aACtBN,KAAK,SAAAe,GAAaN,OAAAA,QAAQK,IAAIC,EAAUX,IAAI,SAAAY,GAAMA,OAAAA,EAAGd,YACrDF,KAAK,SAAAG,GACJR,EAAKgB,mBAAmB,YAAxB,yIAOMM,IAAAA,EAAKrB,SAASsB,cAAc,UAElCf,EAAOiB,OAAO,SAACJ,EAAIK,GAAMA,OAAAA,EAAI,IAAGjB,IAAI,SAAAC,GAClCY,EAAGN,mBAAmB,YACdN,mBAAAA,OAAAA,EAAMO,KADd,yBAORf,EAAYH,GACTM,KAAK,SAAAG,GAAUI,OAAAA,EAAwBb,EAAUS,KACjDmB,MAAM,SAAAC,GAAS,OAAA,IAAIC,MAAMD,KAE5B1B,EAAYH,GACTM,KAAK,SAAAG,GAAUU,OAAAA,EAAwBnB,EAAUS,KACjDmB,MAAM,SAAAC,GAAS,OAAA,IAAIC,MAAMD,KAE5B1B,EAAYH,GACTM,KAAK,SAAAG,GAAUgB,OAAAA,EAAuBzB,EAAUS,KAChDmB,MAAM,SAAAC,GAAS,OAAA,IAAIC,MAAMD","file":"main.da33df23.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst BASE_URL\n  = 'https://mate-academy.github.io/phone-catalogue-static/api/';\n\nconst body = document.body;\n\nconst getPhonesId = (url) => {\n  return fetch(`${url}phones.json`)\n    .then(response => response.json())\n    .then(result => result.map(phone => phone.id));\n};\n\nconst getFirstReceivedDetails = (url, idList) => {\n  Promise.race(idList.map(id => fetch(`${url}phones/${id}.json`)))\n    .then(response => response.json())\n    .then(phone => {\n      body.insertAdjacentHTML('beforeend', `\n        <div class=\"first-received\">\n          <h3>First Received</h3>\n          <ul class=\"first\"><li>${phone.name}</li></ul>\n        </div>\n      `);\n    });\n};\n\nconst getAllSuccessfulDetails = (url, idList) => {\n  Promise.all(idList.map(id => fetch(`${url}phones/${id}.json`)))\n    .then(responses => Promise.all(responses.map(el => el.json())))\n    .then(result => {\n      body.insertAdjacentHTML('beforeend', `\n        <div class=\"all-successful\">\n          <h3>All Successful</h3>\n          <ul class=\"all\"></ul>\n        </div>\n      `);\n\n      const ul = document.querySelector('.all');\n\n      result.map(phone => {\n        ul.insertAdjacentHTML('beforeend', `\n          <li>${phone.name}</li>\n        `);\n      });\n    });\n};\n\nconst getThreeFastestDetails = (url, idList) => {\n  Promise.all(idList.map(id => fetch(`${url}phones/${id}.json`)))\n    .then(responses => Promise.all(responses.map(el => el.json())))\n    .then(result => {\n      body.insertAdjacentHTML('beforeend', `\n        <div class=\"three-fastest\">\n          <h3>Three Successful</h3>\n          <ul class=\"three\"></ul>\n        </div>\n      `);\n\n      const ul = document.querySelector('.three');\n\n      result.filter((el, i) => i < 3).map(phone => {\n        ul.insertAdjacentHTML('beforeend', `\n          <li>${phone.name}</li>\n        `);\n      });\n    });\n};\n\ngetPhonesId(BASE_URL)\n  .then(result => getFirstReceivedDetails(BASE_URL, result))\n  .catch(error => new Error(error));\n\ngetPhonesId(BASE_URL)\n  .then(result => getAllSuccessfulDetails(BASE_URL, result))\n  .catch(error => new Error(error));\n\ngetPhonesId(BASE_URL)\n  .then(result => getThreeFastestDetails(BASE_URL, result))\n  .catch(error => new Error(error));\n"]}